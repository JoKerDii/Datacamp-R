summarise(total_sales = sum(Global_Sales))%>%
mutate(Publisher = fct_reorder(factor(Publisher), total_sales, .desc = TRUE))
library(forcats)
library(forcats)
a <- vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher)%>%
summarise(total_sales = sum(Global_Sales))%>%
mutate(Publisher = fct_reorder(factor(Publisher), total_sales, .desc = TRUE))
s1<- a%>%plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>% add_bars(name = ~Publisher,desc())
a
s1<- a%>%plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>% add_bars(name = ~Publisher,desc())
s1<- a%>%plot_ly(x=~as.character(Publisher),y=~total_sales, color = ~Publisher) %>% add_bars(name = ~Publisher,desc())
s1<- a%>%plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>% add_bars(name = ~Publisher)
library(forcats)
a <- vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher)%>%
summarise(total_sales = sum(Global_Sales))%>%
mutate(Publisher = fct_reorder(factor(Publisher), total_sales, .desc = TRUE))
s1<- a%>%plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>% add_bars(name = ~Publisher)
s1
# Add x-axis and y-axis labels, and a title to  sp2
# sp2 %>%
#    layout(
#      xaxis = list(title = ""),
#      xaxis2 = list(title = "Year"),
#      yaxis = list(title = "Global Sales (M units)"),
#      yaxis2 = list(title = "Global Sales (M units)")
#    )
library(forcats)
# a <- vgsales%>%
#   filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
#   group_by(Publisher)%>%
#   summarise(total_sales = sum(Global_Sales))%>%
#   mutate(Publisher = fct_reorder(factor(Publisher), total_sales, .desc = TRUE))
#
# s1<- a%>%plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>% add_bars(name = ~Publisher)
# s1
vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher)%>%
summarise(total_sales = sum(Global_Sales))%>%
mutate(Publisher = fct_reorder(factor(Publisher), total_sales, .desc = TRUE))%>%
do(
plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>%
add_bars(name = ~Publisher)
)
library(forcats)
# a <- vgsales%>%
#   filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
#   group_by(Publisher)%>%
#   summarise(total_sales = sum(Global_Sales))%>%
#   mutate(Publisher = fct_reorder(factor(Publisher), total_sales, .desc = TRUE))
#
# s1<- a%>%plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>% add_bars(name = ~Publisher)
# s1
vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher)%>%
summarise(total_sales = sum(Global_Sales))%>%
mutate(Publisher = fct_reorder(factor(Publisher), total_sales, .desc = TRUE))%>%
do(
plot = plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>%
add_bars(name = ~Publisher)
)
# Add x-axis and y-axis labels, and a title to  sp2
# sp2 %>%
#    layout(
#      xaxis = list(title = ""),
#      xaxis2 = list(title = "Year"),
#      yaxis = list(title = "Global Sales (M units)"),
#      yaxis2 = list(title = "Global Sales (M units)")
#    )
s2 <- vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher)%>%
summarise(total_sales = sum(Global_Sales))%>%
do(
plot = plot_ly(x=~Year,y=~total_sales, color = ~Publisher) %>%
add_lines(name = ~Publisher)
)
library(forcats)
a <- vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher)%>%
summarise(total_sales = sum(Global_Sales))%>%
mutate(Publisher = fct_reorder(factor(Publisher), total_sales, .desc = TRUE))
s1<- a%>%plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>% add_bars(name = ~Publisher)
s1
b <- vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher)%>%
summarise(total_sales = sum(Global_Sales))
s2 <- b%>%plot_ly(x=~Year,y=~total_sales, color = ~Publisher) %>% add_lines(name = ~Publisher)
s2
library(forcats)
a <- vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher)%>%
summarise(total_sales = sum(Global_Sales))%>%
mutate(Publisher = fct_reorder(factor(Publisher), total_sales, .desc = TRUE))
s1<- a%>%plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>% add_bars(name = ~Publisher)
s1
b <- vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher,Year)%>%
summarise(total_sales = sum(Global_Sales))
s2 <- b%>%plot_ly(x=~Year,y=~total_sales, color = ~Publisher) %>% add_lines(name = ~Publisher)
s2
# Add x-axis and y-axis labels, and a title to  sp2
# sp2 %>%
#    layout(
#      xaxis = list(title = ""),
#      xaxis2 = list(title = "Year"),
#      yaxis = list(title = "Global Sales (M units)"),
#      yaxis2 = list(title = "Global Sales (M units)")
#    )
sp2 <- subplot(s1, s2, nrows = 1, shareX = TRUE, shareY = TRUE)
sp2 %>%
layout(
xaxis = list(title = ""),
xaxis2 = list(title = "Year"),
yaxis = list(title = "Global Sales (M units)"),
yaxis2 = list(title = "Global Sales (M units)")
)
wine %>%
plot_ly() %>%
add_trace(type = 'splom',
dimensions = list(
list(label='Alcohol', values=~Alcohol),
list(label='Flavonoids', values=~Flavanoids),
list(label='Color', values=~Color))
)
wine %>%
plot_ly(color = ~Type) %>%
add_trace( type = 'splom',
dimensions = list(
list(label='Alcohol', values=~Alcohol),
list(label='Flavonoids', values=~Flavanoids),
list(label='Color', values=~Color))
)
knitr::opts_chunk$set(echo = TRUE)
# Create a SPLOM of NA_Sales, EU_Sales, and JP_Sales
vgsales2016 %>%
plot_ly() %>%
add_trace(
type = 'splom',
dimensions = list(
list(label = 'N. America', values = ~NA_Sales),
list(label = 'Europe', values = ~EU_Sales),
list(label = 'Japan', values = ~JP_Sales)
)
)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
wine <- read_csv("data/wine_data/wine.csv")
glimpse(wine)
m <- loess(Alcohol ~ Flavanoids, data = wine, span = 1.5)
wine %>%
plot_ly(x = ~Flavanoids, y = ~Alcohol) %>%
add_markers() %>%
add_lines(y = ~fitted(m)) %>%
layout(showlegend = FALSE)
m2 <- lm(Alcohol ~ poly(Flavanoids, 2), data = wine)
wine %>%
plot_ly(x = ~Flavanoids, y = ~Alcohol) %>%
add_markers(showlegend = FALSE) %>%
add_lines(y = ~fitted(m), name = "LOESS") %>%
add_lines(y = ~fitted(m2), name = "Polynomial")
d1 <- filter(wine, Type == 1)
d2 <- filter(wine, Type == 2)
d3 <- filter(wine, Type == 3)
density1 <- density(d1$Flavanoids)
density2 <- density(d2$Flavanoids)
density3 <- density(d3$Flavanoids)
plot_ly(opacity = 0.5) %>%
add_lines(x = ~density1$x, y = ~density1$y, name = "Type 1") %>%
add_lines(x = ~density2$x, y = ~density2$y, name = "Type 2") %>%
add_lines(x = ~density3$x, y = ~density3$y, name = "Type 3") %>%
layout(xaxis = list(title = 'Flavonoids'),yaxis = list(title = 'Density'))
vgsales <- read_csv("data/vgsales.csv")
vgsales$User_Score <- as.numeric(vgsales$User_Score)
vgsales$Critic_Score <- as.numeric(vgsales$Critic_Score)
vgsales2016 <- vgsales %>% filter(Year == 2016) %>% na.omit()
# Fit the regression model of User_Score on Critic_Score
m <- lm(User_Score ~ Critic_Score, data = vgsales2016)
# Create the scatterplot with smoother
vgsales2016 %>%
select(User_Score, Critic_Score) %>%
na.omit() %>%
plot_ly(x = ~Critic_Score, y = ~User_Score) %>%
add_markers(showlegend = FALSE) %>%
add_lines(y = ~fitted(m))
d <- density(vgsales2016$Critic_Score, na.rm = TRUE)
plot_ly() %>%
add_lines(x = ~d$x, y = ~d$y, fill = 'tozeroy') %>%
layout(xaxis = list(title = 'Critic score'),
yaxis = list(title = 'Density'))
# Compute density curves
d.a <- density(filter(vgsales, Publisher== "Activision")$Critic_Score, na.rm = TRUE)
# d.e <- density(filter(vgsales, Publisher== "EA")$Critic_Score, na.rm = TRUE)
d.n <- density(filter(vgsales, Publisher== "Nintendo")$Critic_Score, na.rm = TRUE)
# Overlay density plots
plot_ly() %>%
add_lines(x = ~d.a$x, y = ~d.a$y, name = "Activision", fill = 'tozeroy') %>%
# add_lines(x = ~d.e$x, y = ~d.e$y, name = "Electronic Arts", fill = 'tozeroy') %>%
add_lines(x = ~d.n$x, y = ~d.n$y, name = "Nintendo", fill = 'tozeroy') %>%
layout(xaxis = list(title = 'Critic Score'),
yaxis = list(title = 'Density'))
vgsales2016 %>%
plot_ly(x = ~Critic_Score, y = ~User_Score, color = ~Genre) %>%
add_markers()
action_df <- vgsales2016 %>%
filter(Genre == "Action")
glimpse(action_df)
action_df %>%
plot_ly(x = ~Critic_Score, y = ~User_Score) %>%
add_markers()
p1 <- action_df %>%
plot_ly(x = ~Critic_Score, y = ~User_Score) %>%
add_markers()
p2 <- vgsales2016 %>%
filter(Genre == "Adventure") %>%
plot_ly(x = ~Critic_Score, y = ~User_Score) %>%
add_markers()
subplot(p1, p2, nrows = 1)
p1 <- action_df %>%
plot_ly(x = ~Critic_Score, y = ~User_Score) %>%
add_markers(name = ~Genre)
p2 <- vgsales2016 %>%
filter(Genre == "Adventure") %>%
plot_ly(x = ~Critic_Score, y = ~User_Score) %>%
add_markers(name = ~Genre)
subplot(p1, p2, nrows = 1)
subplot(p1, p2, nrows = 1, shareY = TRUE, shareX = TRUE)
vgsales2016 %>%
group_by(Genre) %>%
do(plot = plot_ly(data = ., x = ~Critic_Score, y = ~User_Score) %>%
add_markers(name = ~Genre)) %>%
subplot(nrows = 2)
# Create a scatterplot of User_Score against Critic_Score for PS4 games
p1 <- vgsales2016 %>%
filter(Platform == "PS4") %>%
plot_ly(x = ~Critic_Score, y = ~User_Score) %>%
add_markers(name = "PS4")
# Create a scatterplot of User_Score against Critic_Score for XOne games
p2 <- vgsales2016 %>%
filter(Platform == "XOne") %>%
plot_ly(x = ~Critic_Score, y = ~User_Score) %>%
add_markers(name = "XOne")
# Create a facted scatterplot containing p1 and p2
subplot(p1, p2, nrows = 2)
# Create a faceted scatterplot of User_Score vs. Critic_Score with 3 rows
vgsales2016 %>%
group_by(Platform) %>%
do(
plot = plot_ly(data = ., x=~Critic_Score, y=~User_Score) %>%
add_markers(name = ~Platform)
) %>%
subplot(nrows = 3, shareY = TRUE, shareX = TRUE)
# Add x-axis and y-axis labels, and a title
subplot(p1, p2, nrows = 2, shareX = TRUE, shareY = TRUE) %>%
layout(title = "User score vs. critic score by platform, 2016")
library(forcats)
a <- vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher)%>%
summarise(total_sales = sum(Global_Sales))%>%
mutate(Publisher = fct_reorder(factor(Publisher), total_sales, .desc = TRUE))
s1<- a%>%plot_ly(x=~Publisher,y=~total_sales, color = ~Publisher) %>% add_bars(name = ~Publisher)
s1
b <- vgsales%>%
filter(Publisher == "Activision"| Publisher == "Sony Computer Entertainment" |Publisher == "Ubisoft" | Publisher == "Electronic Arts"| Publisher == "Nintendo" ) %>%
group_by(Publisher,Year)%>%
summarise(total_sales = sum(Global_Sales))
s2 <- b%>%plot_ly(x=~Year,y=~total_sales, color = ~Publisher) %>% add_lines(name = ~Publisher)
s2
sp2 <- subplot(s1, s2, nrows = 1, shareX = FALSE, shareY = FALSE)
sp2
# Add x-axis and y-axis labels, and a title to  sp2
sp2 %>%
layout(
xaxis = list(title = ""),
xaxis2 = list(title = "Year"),
yaxis = list(title = "Global Sales (M units)"),
yaxis2 = list(title = "Global Sales (M units)")
)
wine %>%
plot_ly() %>%
add_trace(type = 'splom',
dimensions = list(
list(label='Alcohol', values=~Alcohol),
list(label='Flavonoids', values=~Flavanoids),
list(label='Color', values=~Color))
)
wine %>%
plot_ly(color = ~factor(Type)) %>%
add_trace( type = 'splom',
dimensions = list(
list(label='Alcohol', values=~Alcohol),
list(label='Flavonoids', values=~Flavanoids),
list(label='Color', values=~Color))
)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
wine <- read_csv("data/wine_data/wine.csv")
glimpse(wine)
# Create a SPLOM of NA_Sales, EU_Sales, and JP_Sales
vgsales2016 %>%
plot_ly() %>%
add_trace(
type = 'splom',
dimensions = list(
list(label = 'N. America', values = ~NA_Sales),
list(label = 'Europe', values = ~EU_Sales),
list(label = 'Japan', values = ~JP_Sales)
)
)
# Delete the diagonal plots in splom
splom %>%
style(diagonal = list(visible = FALSE))
# Delete the diagonal plots in splom
splom %>%
style(diagonal = list(visible = FALSE))
# Color the SPLOM of NA_Sales, EU_Sales, and JP_Sales by nintendo
splom <- vgsales2016 %>%
mutate(nintendo = ifelse(Publisher == "Nintendo", "Nintendo", "Other")) %>%
plot_ly(color = ~nintendo) %>%
add_trace(
type = "splom",
dimensions = list(
list(label = 'N. America', values = ~NA_Sales),
list(label = 'Europe', values = ~EU_Sales),
list(label = 'Japan', values = ~JP_Sales
)
))
splom
# Delete the diagonal plots in splom
splom %>%
style(diagonal = list(visible = FALSE))
# Delete the plots in the upper half of splom
splom %>%
style(showupperhalf = FALSE)
# Delete the plots in the lower half of splom
splom %>%
style(showlowerhalf = FALSE)
knitr::opts_chunk$set(echo = TRUE)
turnout <- read_csv("data/election_data/TurnoutRates.csv")
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
turnout <- read_csv("data/election_data/TurnoutRates.csv")
fundraising <- read_csv("data/election_data/fec_candidate_summary.csv")
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
turnout <- read_csv("data/election_data/TurnoutRates.csv")
fundraising <- read_csv("data/election_data/fec_candidate_summary_2018.csv")
head(fundraising)
# Create a histogram of receipts for the senate races
fundraising %>%
filter(office == "S") %>%
plot_ly(x = ~receipts) %>%
add_histogram() %>%
layout(title = "Fundraising for 2018 Senate races",
xaxis = list(title = "Total contributions received"))
head(fundraising)
head(fundraising)
# Create a dotplot of the top 15 Senate campaigns
fundraising %>%
filter(office == "S") %>%
top_n(15, wt = receipts) %>%
plot_ly(x = ~receipts, y = ~fct_reorder(state, receipts),
color = ~fct_drop(party),
hoverinfo = "text",
text = ~paste("Candidate:", name, "<br>",
"Party:", party, "<br>",
"Receipts:", receipts, "<br>",
"Disbursements:", disbursement)) %>%
add_markers(colors = c("blue", "red"))
turnout %>%
plot_geo(locationmode = 'USA-states') %>%
add_trace(
z = ~turnout, # Sets the color values
locations = ~state.abbr # Matches cases to polygons
) %>%
layout(geo = list(scope = 'usa')) # Restricts map only to USA
turnout %>%
plot_geo(locationmode = 'USA-states') %>%
add_trace(
z = ~turnout, # Sets the color values
locations = ~state.abbr # Matches cases to polygons
) %>%
layout(geo = list(scope = 'usa')) # Restricts map only to USA
turnout %>%
plot_geo(locationmode = 'USA-states')
turnout %>%
plot_geo(locationmode = 'USA-states') %>%
add_trace(
z = ~turnout, # Sets the color values
locations = ~state.abbr # Matches cases to polygons
)
rlang::last_error()
# Create a choropleth map of the change in voter turnout from 2014 to 2018
turnout %>%
mutate(change = turnout2018 - turnout2014) %>%
plot_geo(locationmode = 'USA-states') %>%
add_trace(z = ~change, locations = ~state.abbr) %>%
layout(geo = list(scope = "usa"))
senate_winners <- read_csv("data/election_data/senate_winners.csv")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
turnout <- read_csv("data/election_data/TurnoutRates.csv")
fundraising <- read_csv("data/election_data/fec_candidate_summary_2018.csv")
senate_winners <- read_csv("data/election_data/senate_winners.csv")
# Create a choropleth map displaying the Senate results
senate_winners %>%
plot_geo(locationmode = 'USA-states') %>%
add_trace(z = ~as.numeric(party), locations = ~state,
colors = c("dodgerblue", "mediumseagreen", "tomato"),
hoverinfo = "text",
text = ~paste("Candidate:", name, "<br>",
"Party:", party, "<br>",
"% vote:", round(pct.vote, 1))
) %>%
layout(geo = list(scope = 'usa')) %>%
hide_colorbar()
rallies2018 <- read_csv("data/election_data/fl_results.csv")
head(rallies2018)
colnames(rallies2018)
rallies2018 <- read_csv("data/election_data/fl_boundaries.csv")
colnames(rallies2018)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
turnout <- read_csv("data/election_data/TurnoutRates.csv")
fundraising <- read_csv("data/election_data/fec_candidate_summary_2018.csv")
senate_winners <- read_csv("data/election_data/senate_winners.csv")
rallies2018 <- read_csv("data/election_data/fl_boundaries.csv")
# Map President Trump's rallies in 2018
rallies2018 %>%
plot_geo(locationmode = 'USA-states') %>%
add_markers(
x = ~long, y = ~lat, size = ~no.speakers,
hoverinfo = "text", text = ~paste(city, state, sep = ",")
) %>%
layout(title = "2018 Trump Rallies",
geo = list(scope = "usa"))
colnames(rallies2018)
head(rallies2018)
tail(rallies2018)
turnout <- turnout %>%
mutate(state = tolower(state)) # make state names lowercase
states_map <- left_join(us_states, turnout, by = c("region" = "state"))
# Create a choropleth map displaying the Senate winners
senate_map %>%
group_by(group) %>%
plot_ly(x=~long, y=~lat, color = ~party, split = ~region) %>%
add_polygons(line = list(width = 0.4), showlegend=FALSE)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
turnout <- read_csv("data/election_data/TurnoutRates.csv")
fundraising <- read_csv("data/election_data/fec_candidate_summary_2018.csv")
senate_winners <- read_csv("data/election_data/senate_winners.csv")
fl_boundaries <- read_csv("data/election_data/fl_boundaries.csv")
fl_results <- read_csv("data/election_data/fl_results.csv")
# Join the fl_boundaries and fl_results data frames
senate_vote <- left_join(fl_boundaries, fl_results, by = c("CountyName" = "subregion"))
# Join the fl_boundaries and fl_results data frames
senate_vote <- left_join(fl_boundaries, fl_results, by = c("subregion" = "CountyName"))
# Create a county-level choropleth map of Pctvote
senate_vote %>%
group_by(group) %>%
plot_ly(x = ~long, y = ~lat,
color = ~Pctvote,
split = ~subregion) %>%
add_polygons(line = list(width = 0.4), showlegend = FALSE, colors = c("blue", "red"))
# Join the fl_boundaries and fl_results data frames
senate_vote <- left_join(fl_boundaries, fl_results, by = c("subregion" = "CountyName"))
# Create a county-level choropleth map of Pctvote
senate_vote %>%
group_by(group) %>%
plot_ly(x = ~long, y = ~lat,
color = ~Pctvote,
split = ~subregion) %>%
add_polygons(line = list(width = 0.4), showlegend = FALSE, colors = c("blue", "red"))
# Join the fl_boundaries and fl_results data frames
senate_vote <- left_join(fl_boundaries, fl_results, by = c("subregion" = "CountyName"))
# Specify the axis settings to polish the map
map_axes <- list(title="", showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)
# Create a polished county-level choropleth map of Pctvote
senate_vote %>%
group_by(group) %>%
plot_ly(x = ~long, y = ~lat,
color = ~Pctvote,
split = ~subregion) %>%
add_polygons(line = list(width = 0.4), showlegend = FALSE, colors = c("blue", "red")) %>%
layout(xaxis = map_axes, yaxis = map_axes)
